0)
Ограничение области видимости/ использование отдельного сегмента памяти.
1)
Создание нового класса на основе старого; переиспользование кода.
2)
public родителя -> public наследника;
protected родителя -> protected наследника;
private родителя -> невидим для наследника вообще никак, кроме как через методы родителя,
или дружественных ему классов.
3)
Ссылка и указатель базового типа могут указывать на наследника и работать с ним как с базовым.
4)
Чтобы, если при работе используются указатели и ссылки базового класса,
указывающие на наследников, использовались методы наследников, но не базового класса.