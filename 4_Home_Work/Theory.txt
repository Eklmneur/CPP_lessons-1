0)
Внутри функции: переменная объявленная с помощью
этого ключевого слова будет удалена только
после окончания программы. Кроме того,
такая переменная будет инициализироваться только один раз.
Внутри класса: переменная будет существовать одна для
всех экземпляров класса, обращаться к ней стоит через
class_name::static_name. С функциями аналогично, только
их следует использовать как раз для работы со
статическими переменными.
Глобально в файле: может использоваться повсеместно в файле,
но ни в каком другом файле.
1)
Создание нового класса на основе старого позволяет быстро создавать новые классы,
обладающие всеми старыми возможностями, плюс дополнительно новыми возможностями,
не нужными старому классу.
2)
Public-наследование переводит области видимости родителя
в области видимости наследника следующим образом:
public родителя -> public наследника (т.е., то, что было видно везде, будет видно везде);
protected родителя -> protected наследника (т.е., то что видно
наследникам родителя, видно наследникам наследника);
private родителя -> невидим для наследника вообще никак, кроме как через методы родителя,
или дружественных ему классов.
3)
Ссылка и указатель базового типа могут указывать на наследника и работать с ним как с базовым,
так как экземпляры наследника в точности повторяют строение родителя,
только имеют над этим некоторую надстройку. Поэтому работа с ним как с экземпляром
базового будет затрагивать базовую структуру, как и должно.
4)
Чтобы, если при работе используются указатели и ссылки базового класса,
указывающие на наследников, использовались методы наследников, но не базового класса.